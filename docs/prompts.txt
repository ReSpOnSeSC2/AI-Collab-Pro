# AI-Collab Development Prompts
# Vision: Multiple AIs collaborating on real code/files in a sandboxed environment
# Core Principle: ABSOLUTELY NO MOCK DATA - All features must work with real data from MongoDB/APIs

## Phase 1: Security & Cost Management (Foundation)

### Prompt 1 - Security Documentation
Create a comprehensive security documentation file at docs/SECURITY.md that covers:
- JavaScript VM sandbox implementation details
- Pyodide WebAssembly isolation for Python
- File system access controls and quotas
- Prompt injection prevention strategies
- API key encryption methodology
- Rate limiting and resource quotas
- Incident response procedures
- Responsible disclosure contact

Requirements:
- Full Markdown format with proper sections
- Include code examples for each security measure
- Add diagrams where helpful
- Reference actual implementation files
- NO MOCK EXAMPLES - use real security scenarios

### Prompt 2 - Cost Control System
Create src/lib/ai/costControl.mjs that implements real-time cost tracking:

Requirements:
- Track costs per provider per model using ACTUAL pricing:
  * GPT-4: $0.03/1K input, $0.06/1K output
  * GPT-3.5: $0.0015/1K input, $0.002/1K output
  * Claude-3-Opus: $0.015/1K input, $0.075/1K output
  * Claude-3-Sonnet: $0.003/1K input, $0.015/1K output
  * Gemini-Pro: $0.00025/1K input, $0.0005/1K output
  * Add other models with real prices
- Export functions:
  * estimateCost(provider, model, inputTokens, outputTokens)
  * trackUsage(sessionId, provider, model, usage)
  * getSessionCost(sessionId)
  * getUserDailyCost(userId)
  * enforceBudgetLimit(userId, limit)
- Store in MongoDB 'usage_tracking' collection
- Real-time updates via WebSocket
- Automatic cutoff when limit reached
- Production-ready error handling
- ES5 syntax with 'use strict'

### Prompt 3 - Cost UI Components
Create public/js/costTracker.js that displays real-time costs:

Requirements:
- Live cost counter showing session and daily totals
- Visual cost bar (green → yellow → red based on % of budget)
- Cost breakdown by model popup
- Budget setting controls
- Warning modals at 80% and 95% of budget
- Automatic disable of send button when over budget
- Fetch real data from /api/costs endpoint
- Update via WebSocket for real-time display
- Use modern but compatible CSS animations
- MUST work with actual MongoDB cost data, NO hardcoded values

## Phase 2: Secure Code Execution

### Prompt 4 - JavaScript Sandbox Runner
Create src/lib/sandbox/jsSandbox.mjs for safe JavaScript execution:

Requirements:
- Use vm2 or isolated-vm for secure context
- Implement these functions:
  * executeCode(code, timeout, memoryLimit)
  * validateCode(code) - check for dangerous patterns
  * getSafeAPIs() - return allowed Node APIs
- Resource limits:
  * Max execution time: 30 seconds
  * Max memory: 512MB
  * No network access by default
  * No file system access except specified directories
- Capture stdout, stderr, return values
- Handle infinite loops gracefully
- Return {success, output, error, executionTime, memoryUsed}
- Log all executions to MongoDB 'code_executions' collection
- Production error handling, no crashes allowed

### Prompt 5 - Python Sandbox Integration
Create src/lib/sandbox/pythonSandbox.mjs using Pyodide:

Requirements:
- Load Pyodide WebAssembly in worker thread
- Implement matching API to jsSandbox:
  * executeCode(code, timeout, memoryLimit)
  * installPackage(packageName) - whitelist only
  * getInstalledPackages()
- Preload common packages: numpy, pandas, matplotlib
- Virtual file system for Python file operations
- Capture plots/images as base64
- Return {success, output, error, executionTime, artifacts}
- Must handle real Python code from AI responses
- Cache Pyodide initialization for performance

### Prompt 6 - Code Execution UI
Update public/js/codeExecutor.js to add execution capabilities:

Requirements:
- Add "Run Code" button to code blocks
- Auto-detect language from code block
- Show execution status spinner
- Display output in collapsible panel below code
- Error output in red with stack traces
- Support for multiple executions per session
- Download button for generated files/plots
- Execution history sidebar
- MUST execute real code, not simulated output
- Handle all error cases gracefully

## Phase 3: Enhanced Collaboration Features

### Prompt 7 - Multi-AI Code Collaboration Protocol
Create src/lib/collaboration/codeCollab.mjs for AI teamwork:

Requirements:
- Orchestrate multiple AIs working on same codebase:
  * Sequential mode: Each AI improves previous code
  * Parallel mode: AIs work on different functions
  * Review mode: One AI writes, others review
  * Debug mode: AIs collaborate to fix errors
- Real WebSocket events for each AI action
- Merge conflict resolution for parallel edits
- Track which AI made which changes
- Generate unified diff of all changes
- Save collaboration sessions to MongoDB
- NO MOCK CONVERSATIONS - must use real AI APIs

### Prompt 8 - Project Workspace Manager
Create src/lib/workspace/projectManager.mjs for file management:

Requirements:
- Create isolated workspaces in /workspace/[sessionId]/
- Functions:
  * createWorkspace(sessionId)
  * uploadFiles(sessionId, files)
  * readFile(sessionId, filepath)
  * writeFile(sessionId, filepath, content)
  * listFiles(sessionId)
  * deleteWorkspace(sessionId)
- File permissions and size limits
- Support folder structures
- Git integration for version tracking
- Automatic cleanup after 24 hours
- Real file operations, not in-memory simulation

### Prompt 9 - Workspace UI Components
Create public/js/workspaceManager.js for file tree UI:

Requirements:
- Visual file tree with folders (collapsible)
- File upload via drag-and-drop
- In-browser code editor (CodeMirror or Monaco)
- Multiple file tabs
- Save/autosave functionality
- File operation confirmations
- Search across files
- Git status indicators
- Right-click context menus
- Must work with real files from projectManager API

## Phase 4: API Management & Templates

### Prompt 10 - Secure API Key Manager
Create src/lib/security/apiKeyManager.mjs:

Requirements:
- Encrypt keys with AES-256-GCM using environment secret
- Functions:
  * addKey(userId, provider, key)
  * getKey(userId, provider) - decrypt on demand
  * rotateKey(userId, provider, newKey)
  * validateKey(provider, key) - test with real API
  * listKeys(userId) - return masked versions
- Store in MongoDB 'api_keys' collection
- Audit log for all key operations
- Automatic key rotation reminders
- Key health check endpoint
- Zero-knowledge architecture where possible

### Prompt 11 - API Key Management UI
Create public/admin-keys.html and public/js/keyManager.js:

Requirements:
- List all configured API keys (masked)
- Add new key with provider dropdown
- Test key button (real API validation)
- Delete with confirmation
- Key health status indicators
- Last used timestamps
- Usage statistics per key
- Rotate key functionality
- Copy to clipboard (with security warning)
- MUST use real API validation, not mock responses

### Prompt 12 - Smart Template System
Create src/lib/templates/templateEngine.mjs:

Requirements:
- Dynamic prompt templates with variables
- Functions:
  * createTemplate(name, content, variables)
  * renderTemplate(templateId, values)
  * validateTemplate(content)
  * shareTemplate(templateId, visibility)
- Support conditionals: {{#if debugMode}}...{{/if}}
- Support loops: {{#each files}}...{{/each}}
- Template categories and tags
- Usage analytics per template
- Store in MongoDB 'prompt_templates'
- Import/export functionality

## Phase 5: Advanced Features

### Prompt 13 - Conversation Memory System
Create src/lib/memory/conversationMemory.mjs:

Requirements:
- Smart conversation summarization
- Functions:
  * saveConversation(sessionId, messages)
  * loadConversation(sessionId)
  * searchConversations(userId, query)
  * getRelatedConversations(currentContext)
  * autoSummarize(messages) - using AI
- Compress old conversations
- Semantic search using embeddings
- Export formats: JSON, Markdown, PDF
- Privacy controls (auto-delete options)
- Must handle real conversation data from MongoDB

### Prompt 14 - Enhanced Admin Dashboard
Update all admin pages to remove ANY mock data:

Requirements:
- admin-dashboard.html: Real user counts, activity, costs
- admin-activity.html: Actual user actions from logs
- admin-models.html: Live model availability status
- admin-conversations.html: Real conversation data
- admin-feedback.html: Actual user feedback
- admin-usage.html: True API usage statistics
- Add new admin-costs.html: Cost breakdown by user/model
- Add new admin-security.html: Security event log
- ALL data from MongoDB/real APIs, NO static values

### Prompt 15 - Performance Monitoring
Create src/lib/monitoring/performanceTracker.mjs:

Requirements:
- Track real metrics:
  * API response times per provider
  * Token generation speed
  * Sandbox execution times
  * MongoDB query performance
  * WebSocket latency
- Functions:
  * trackAPICall(provider, model, duration, tokens)
  * getPerformanceReport(timeRange)
  * detectAnomalies()
  * alertOnDegradation()
- Store in MongoDB 'performance_metrics'
- Real-time dashboard updates
- Automatic alert thresholds

## Phase 6: Production Readiness

### Prompt 16 - Error Boundary System
Create src/lib/errors/errorBoundary.mjs:

Requirements:
- Comprehensive error handling:
  * API failures with retry logic
  * Sandbox crashes with cleanup
  * MongoDB connection issues
  * WebSocket disconnections
  * Rate limit handling
- User-friendly error messages
- Detailed admin error logs
- Error recovery strategies
- Prevent cascade failures
- Real error tracking, not simulated

### Prompt 17 - Backup and Recovery
Create src/lib/backup/backupManager.mjs:

Requirements:
- Automated backup system:
  * Daily MongoDB backups
  * Workspace file backups
  * Configuration backups
  * Encrypted backup storage
- Recovery functions:
  * restoreDatabase(backupId)
  * restoreWorkspace(sessionId, backupId)
  * rollbackToCheckpoint(timestamp)
- Backup retention policies
- Restore testing utilities
- Must work with real data

### Prompt 18 - Health Check System
Create src/api/health.mjs for monitoring:

Requirements:
- Comprehensive health checks:
  * MongoDB connection
  * All AI API endpoints
  * Sandbox availability
  * Disk space
  * Memory usage
  * WebSocket server
- Return detailed status:
  {
    status: 'healthy|degraded|unhealthy',
    services: { [service]: { status, latency, error } },
    metrics: { cpu, memory, disk, activeUsers },
    timestamp: Date.now()
  }
- Real system metrics, not fake values

### Prompt 19 - Progressive Web App
Update public/index.html and create service worker:

Requirements:
- Offline capability for viewing history
- Background sync for pending messages
- Push notifications for long-running tasks
- App manifest for installation
- Cache strategies for assets
- IndexedDB for offline data
- Real offline functionality, test thoroughly

### Prompt 20 - Deployment Configuration
Create deployment configurations:

Requirements:
- Docker Compose for full stack
- Environment variable templates
- Nginx configuration for reverse proxy
- SSL/TLS setup instructions
- Monitoring integration (Prometheus/Grafana)
- Backup automation scripts
- Scaling guidelines
- Must be production-tested configs

## Implementation Order:
1. Start with Prompts 2-3 (Cost Control)
2. Then 4-6 (Basic Sandboxing)
3. Then 10-11 (API Key Management)
4. Then 7-9 (Collaboration Features)
5. Fill in remaining features based on user needs

## Critical Requirements for ALL Prompts:
- NO MOCK DATA - everything must use real MongoDB/API data
- Production-ready error handling
- Proper logging and monitoring
- Security best practices
- Performance optimization
- Responsive UI design
- Accessibility compliance
- Full documentation
- Unit tests where applicable